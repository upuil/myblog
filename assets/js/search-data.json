{
  
    
        "post0": {
            "title": "tensorflow preprocessing layers",
            "content": "import numpy as np . import tensorflow as tf . from tensorflow.keras import layers . data = np.array([[0.1,0.2,0.3], [0.8,0.9,1.0], [1.5,1.6,1.7]]) . layer = layers.Normalization() . layer.adapt(data) . normalized_data = layer(data) . print(&quot;Feature mean: %.2f&quot; %(normalized_data.numpy().mean())) . Feature mean: -0.00 . print(&quot;Feature std: %.2f&quot; %(normalized_data.numpy().std())) . Feature std: 1.00 . from tensorflow import keras from tensorflow.keras import layers . data_augmentation = keras.Sequential( [ layers.RandomFlip(&quot;horizontal&quot;), layers.RandomRotation(0.1), layers.RandomZoom(0.1), ] ) . load some data . (x_train, y_train), _ = keras.datasets.cifar10.load_data() input_shape = x_train.shape[1:] classes = 10 . Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz 170498071/170498071 [==============================] - 82s 0us/step . train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)) train_dataset = train_dataset.batch(16).map(lambda x, y: (data_augmentation(x), y)) . input_shape . (32, 32, 3) . x_train.shape . (50000, 32, 32, 3) . y_train.shape . (50000, 1) . train_dataset #MapDataset . &lt;MapDataset element_spec=(TensorSpec(shape=(None, 32, 32, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 1), dtype=tf.uint8, name=None))&gt; . train_dataset.element_spec . (TensorSpec(shape=(None, 32, 32, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 1), dtype=tf.uint8, name=None)) . &#21019;&#24314;&#19968;&#20010;&#27169;&#22411;&#65292;&#21033;&#29992;&#25968;&#25454;&#22686;&#24378;&#21518;&#30340;&#25968;&#25454;&#35757;&#32451; . inputs = keras.Input(shape=input_shape) x = layers.Rescaling(1.0 / 255)(inputs) outputs = keras.applications.ResNet50( weights=None, input_shape=input_shape, classes=classes )(x) model = keras.Model(inputs, outputs) model.compile(optimizer=&quot;rmsprop&quot;, loss=&quot;sparse_categorical_crossentropy&quot;) model.fit(train_dataset, steps_per_epoch=5) . 5/5 [==============================] - 18s 86ms/step - loss: 8.8498 . &lt;keras.callbacks.History at 0x7f85fcb370d0&gt; . &#36890;&#36807;0-1&#32534;&#30721;&#23383;&#31526;&#29305;&#24449; . data = tf.constant([[&quot;a&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;a&quot;],[&#39;e&#39;]]) . data.numpy() . array([[b&#39;a&#39;], [b&#39;b&#39;], [b&#39;c&#39;], [b&#39;b&#39;], [b&#39;c&#39;], [b&#39;a&#39;], [b&#39;e&#39;]], dtype=object) . lookup = layers.StringLookup(output_mode=&quot;one_hot&quot;) lookup.adapt(data) . test_data = tf.constant([[&quot;a&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;d&quot;],[&quot;e&quot;],[&quot;&quot;]]) . encoded_data = lookup(test_data) . print(encoded_data) . tf.Tensor( [[0. 0. 0. 1. 0.] [0. 0. 1. 0. 0.] [0. 1. 0. 0. 0.] [1. 0. 0. 0. 0.] [0. 0. 0. 0. 1.] [1. 0. 0. 0. 0.]], shape=(6, 5), dtype=float32) . test_data_1 = tf.constant([[&quot;a&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;a&quot;]]) . lookup(test_data_1) . &lt;tf.Tensor: shape=(6, 4), dtype=float32, numpy= array([[0., 0., 0., 1.], [0., 0., 1., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 1., 0., 0.], [0., 0., 0., 1.]], dtype=float32)&gt; . test_data_1 = tf.constant([[&quot;a&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;b&quot;],[&quot;c&quot;],[&quot;a&quot;],[&quot;d&quot;],[&quot;e&quot;],[&quot;f&quot;]]) . lookup(test_data_1) . &lt;tf.Tensor: shape=(9, 5), dtype=float32, numpy= array([[0., 0., 0., 1., 0.], [0., 0., 1., 0., 0.], [0., 1., 0., 0., 0.], [0., 0., 1., 0., 0.], [0., 1., 0., 0., 0.], [0., 0., 0., 1., 0.], [1., 0., 0., 0., 0.], [0., 0., 0., 0., 1.], [1., 0., 0., 0., 0.]], dtype=float32)&gt; . 1.1 &#26681;&#25454;&#24050;&#30693;&#35789;&#27719;&#34920;&#21019;&#24314;&#26597;&#25214;&#23618; . vocab = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] data = tf.constant([[&#39;a&#39;,&#39;c&#39;,&#39;d&#39;],[&#39;d&#39;,&#39;z&#39;,&#39;b&#39;]]) layer = tf.keras.layers.StringLookup(vocabulary=vocab) . layer.get_vocabulary() # 根据a的索引位置为1，b的为2，将输入数据编码 . [&#39;[UNK]&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . layer(data) . &lt;tf.Tensor: shape=(2, 3), dtype=int64, numpy= array([[1, 3, 4], [4, 0, 2]])&gt; . 1.2 &#26410;&#30693;&#35789;&#27719;&#34920;&#65292;&#26681;&#25454;&#23545;&#36755;&#20837;&#25968;&#25454;&#20998;&#26512;&#24314;&#31435;&#35789;&#27719;&#34920; . data = tf.constant([[&#39;a&#39;,&#39;c&#39;,&#39;d&#39;],[&#39;d&#39;,&#39;z&#39;,&#39;b&#39;]]) . layer = tf.keras.layers.StringLookup() layer.adapt(data) layer.get_vocabulary() #排到第一的是未知字符，然后是出现频率最多的，然后是逆序排列 . WARNING:tensorflow:6 out of the last 6 calls to &lt;function PreprocessingLayer.make_adapt_function.&lt;locals&gt;.adapt_step at 0x7f80790bbc10&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for more details. . [&#39;[UNK]&#39;, &#39;d&#39;, &#39;z&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . data = tf.constant([[&quot;a&quot;,&quot;c&quot;,&quot;d&quot;],[&quot;d&quot;,&quot;z&quot;,&quot;b&quot;]]) . layer = tf.keras.layers.StringLookup() #默认输出模式为 int, 输入字符根据对应的词汇表中的位置索引转化 . layer.adapt(data) . layer(data) . &lt;tf.Tensor: shape=(2, 3), dtype=int64, numpy= array([[5, 3, 1], [1, 2, 4]])&gt; . 1.3 &#35774;&#32622;&#22810;&#20010;&#26410;&#30693;&#23383;&#31526;&#20301;&#32622; . vocab = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] data= tf.constant([[&#39;a&#39;,&#39;c&#39;,&#39;d&#39;],[&#39;m&#39;,&#39;z&#39;,&#39;b&#39;]]) layer = tf.keras.layers.StringLookup(vocabulary=vocab, num_oov_indices=2) . layer.get_vocabulary() . [&#39;[UNK]&#39;, &#39;[UNK]&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . layer(data) . &lt;tf.Tensor: shape=(2, 3), dtype=int64, numpy= array([[2, 4, 5], [0, 1, 3]])&gt; . 1.4 one-hot output . vocab = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] data = tf.constant([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;z&#39;]) layer = tf.keras.layers.StringLookup( vocabulary = vocab, output_mode=&quot;one_hot&quot; ) . layer.get_vocabulary() # 第一个位置代表位置字符 . [&#39;[UNK]&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . layer(data) . &lt;tf.Tensor: shape=(5, 5), dtype=float32, numpy= array([[0., 1., 0., 0., 0.], [0., 0., 1., 0., 0.], [0., 0., 0., 1., 0.], [0., 0., 0., 0., 1.], [1., 0., 0., 0., 0.]], dtype=float32)&gt; . 1.5 Multi-hot output . vocab = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] data = tf.constant([[&#39;a&#39;,&#39;c&#39;,&#39;d&#39;,&#39;d&#39;],[&#39;d&#39;,&#39;z&#39;,&#39;b&#39;,&#39;z&#39;]]) layer = tf.keras.layers.StringLookup( vocabulary = vocab, output_mode=&#39;multi_hot&#39; ) . layer.get_vocabulary() . [&#39;[UNK]&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . layer(data) . &lt;tf.Tensor: shape=(2, 5), dtype=float32, numpy= array([[0., 1., 0., 1., 1.], [1., 0., 1., 0., 1.]], dtype=float32)&gt; . 1.6 &#35745;&#25968; Token count output . vocab = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] data = tf.constant([[&#39;a&#39;,&#39;c&#39;,&#39;d&#39;,&#39;d&#39;],[&#39;d&#39;,&#39;z&#39;,&#39;b&#39;,&#39;z&#39;]]) layer = tf.keras.layers.StringLookup( vocabulary = vocab, output_mode=&#39;count&#39; ) . layer.get_vocabulary() . [&#39;[UNK]&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . layer(data) . &lt;tf.Tensor: shape=(2, 5), dtype=float32, numpy= array([[0., 1., 0., 1., 2.], [2., 0., 1., 0., 1.]], dtype=float32)&gt; .",
            "url": "https://upuil.github.io/myblog/jupyter/preprocessing_layers/2022/06/02/working-with-preprocessing-layers.html",
            "relUrl": "/jupyter/preprocessing_layers/2022/06/02/working-with-preprocessing-layers.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "&#20851;&#20110; . 介绍fastpages 写jupyter notebook的一些功能。 . 有了fastpages，你可以把你的jupyter笔记本保存到你的资源库根部的_notebooks文件夹中，它们将被自动转换为符合Jekyll标准的博客文章! . Front Matter . 在你的Jupyter笔记本或markdown博客文章中的第一个单元格包含font matter。 font matter是元数据，可以在你的notebook中打开/关闭选项。它的格式是这样的。 . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . 设置 toc: true 会自动生成目录。 | 设置 badges: true 会自动包括 GitHub 和 Google Colab 的链接在你的notebook中. | 设置 comments: true 借助与 utterances可以在对你的内容添加评论. | . 标题和描述只有在包括特殊字符（如冒号）时才需要用双引号括起来。更多关于前言的细节和选项可以在以下网站的readme查看 front matter section. . Markdown Shortcuts . #hide 在任何代码单元顶部的注释将在你的博客文章中隐藏该单元的输入和输出。 . #hide_input 在任何代码单元顶部的注释将只隐藏该单元的输入。 . The comment #hide_input was used to hide the code that produced this. . 如果你想在默认情况下隐藏该单元格, 但又想让读者选择显示该单元格，可以在任何单元格的顶部放一个#collapse-hide标志。 . import pandas as pd import altair as alt . . 如果你想在默认情况下显示该单元格，但又想让读者选择隐藏它，可以在任何单元格的顶部放一个#collapse-show标志。 . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . 如果你想把输出放在一个默认关闭的可折叠元素下，在任何单元格的顶部放置一个#collapse-output标志，但让读者选择打开它。 . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . &#34920; . 表格可以用常用的方式直接显示 . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . &#22270;&#29255; . &#26412;&#22320;&#22270;&#29255; . 你可以引用本地图片，它们将被复制并自动呈现在你的博客上。 你可以用下面的markdown语法包括这些。 . ![](my_icons/fastai_logo.png) . . 用如下的方式可以显示远程图片 `![](https://image.flaticon.com/icons/svg/36/36686.svg)` . . &#21160;&#30011; gifs . 动画和图片是一样的方式 ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . &#26631;&#39064; . 你可以这样在图片上添加标题 . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . &#20854;&#23427;&#20803;&#32032; . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . &#33050;&#27880; . 你可以在笔记本中设置脚注，但是语法与markdown文档不同。. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://upuil.github.io/myblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://upuil.github.io/myblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://upuil.github.io/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://upuil.github.io/myblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}